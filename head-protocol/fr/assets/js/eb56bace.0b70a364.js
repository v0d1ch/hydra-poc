"use strict";(self.webpackChunkhydra_head_protocol_docs=self.webpackChunkhydra_head_protocol_docs||[]).push([[8335],{3905:function(e,t,a){a.d(t,{Zo:function(){return d},kt:function(){return k}});var n=a(7294);function l(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function r(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){l(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,n,l=function(e,t){if(null==e)return{};var a,n,l={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(l[a]=e[a]);return l}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(l[a]=e[a])}return l}var p=n.createContext({}),o=function(e){var t=n.useContext(p),a=t;return e&&(a="function"==typeof e?e(t):r(r({},t),e)),a},d=function(e){var t=o(e.components);return n.createElement(p.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var a=e.components,l=e.mdxType,i=e.originalType,p=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),m=o(a),k=l,c=m["".concat(p,".").concat(k)]||m[k]||u[k]||i;return a?n.createElement(c,r(r({ref:t},d),{},{components:a})):n.createElement(c,r({ref:t},d))}));function k(e,t){var a=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var i=a.length,r=new Array(i);r[0]=m;var s={};for(var p in t)hasOwnProperty.call(t,p)&&(s[p]=t[p]);s.originalType=e,s.mdxType="string"==typeof e?e:l,r[1]=s;for(var o=2;o<i;o++)r[o]=a[o];return n.createElement.apply(null,r)}return n.createElement.apply(null,a)}m.displayName="MDXCreateElement"},9132:function(e,t,a){a.r(t),a.d(t,{assets:function(){return d},contentTitle:function(){return p},default:function(){return k},frontMatter:function(){return s},metadata:function(){return o},toc:function(){return u}});var n=a(7462),l=a(3366),i=(a(7294),a(3905)),r=["components"],s={},p="Test Results for hydra-node",o={unversionedId:"tests/hydra-node/hspec-results",id:"tests/hydra-node/hspec-results",title:"Test Results for hydra-node",description:"Hydra.SnapshotStrategy",source:"@site/benchmarks/tests/hydra-node/hspec-results.md",sourceDirName:"tests/hydra-node",slug:"/tests/hydra-node/hspec-results",permalink:"/head-protocol/fr/benchmarks/tests/hydra-node/hspec-results",editUrl:"https://github.com/input-output-hk/hydra/tree/master/docs/benchmarks/tests/hydra-node/hspec-results.md",tags:[],version:"current",frontMatter:{},sidebar:"defaultSidebar",previous:{title:"Test Results for hydra-cluster",permalink:"/head-protocol/fr/benchmarks/tests/hydra-cluster/hspec-results"},next:{title:"Test Results for hydra-tui",permalink:"/head-protocol/fr/benchmarks/tests/hydra-tui/hspec-results"}},d={},u=[{value:"Hydra.SnapshotStrategy",id:"hydrasnapshotstrategy",level:2},{value:"New Snapshot Decision",id:"new-snapshot-decision",level:3},{value:"Snapshot Emission",id:"snapshot-emission",level:4},{value:"Hydra.Persistence",id:"hydrapersistence",level:2},{value:"PersistenceIncremental",id:"persistenceincremental",level:3},{value:"Persistence",id:"persistence",level:3},{value:"Hydra.Party",id:"hydraparty",level:2},{value:"Ord",id:"ord",level:3},{value:"JSON encoding of Party",id:"json-encoding-of-party",level:3},{value:"Hydra.Options",id:"hydraoptions",level:2},{value:"Hydra Node RunOptions",id:"hydra-node-runoptions",level:3},{value:"JSON encoding of RunOptions",id:"json-encoding-of-runoptions",level:4},{value:"publish-scripts sub-command",id:"publish-scripts-sub-command",level:4},{value:"Hydra.Node",id:"hydranode",level:2},{value:"Hydra.Network.Heartbeat",id:"hydranetworkheartbeat",level:2},{value:"Hydra.Network",id:"hydranetwork",level:2},{value:"Serialisation",id:"serialisation",level:3},{value:"JSON encoding of (Message SimpleTx)",id:"json-encoding-of-message-simpletx",level:4},{value:"Ouroboros Network",id:"ouroboros-network",level:3},{value:"Hydra.Model",id:"hydramodel",level:2},{value:"Hydra.Logging.Monitoring",id:"hydraloggingmonitoring",level:2},{value:"Hydra.Logging",id:"hydralogging",level:2},{value:"Hydra.Ledger.Simple",id:"hydraledgersimple",level:2},{value:"Hydra.Ledger.Cardano",id:"hydraledgercardano",level:2},{value:"JSON encoding of (Tx BabbageEra)",id:"json-encoding-of-tx-babbageera",level:3},{value:"JSON encoding of (UTxO&#39; (TxOut CtxUTxO BabbageEra))",id:"json-encoding-of-utxo-txout-ctxutxo-babbageera",level:3},{value:"JSON encoding of AssetName",id:"json-encoding-of-assetname",level:3},{value:"Evaluate helpers",id:"evaluate-helpers",level:3},{value:"Generators",id:"generators",level:3},{value:"Hydra.HeadLogic",id:"hydraheadlogic",level:2},{value:"Coordinated Head Protocol",id:"coordinated-head-protocol",level:3},{value:"Types",id:"types",level:3},{value:"JSON encoding of (HeadState SimpleTx)",id:"json-encoding-of-headstate-simpletx",level:4},{value:"JSON encoding of (Event SimpleTx)",id:"json-encoding-of-event-simpletx",level:4},{value:"Hydra.FireForget",id:"hydrafireforget",level:2},{value:"Hydra.Crypto",id:"hydracrypto",level:2},{value:"MultiSignature",id:"multisignature",level:3},{value:"Signature",id:"signature",level:3},{value:"VerificationKey",id:"verificationkey",level:3},{value:"JSON encoding of (VerificationKey HydraKey)",id:"json-encoding-of-verificationkey-hydrakey",level:4},{value:"SigningKey",id:"signingkey",level:3},{value:"Hydra.Chain.Direct.Wallet",id:"hydrachaindirectwallet",level:2},{value:"newTinyWallet",id:"newtinywallet",level:3},{value:"coverFee",id:"coverfee",level:3},{value:"applyBlock",id:"applyblock",level:3},{value:"genBlock / genUTxO",id:"genblock--genutxo",level:3},{value:"Hydra.Chain.Direct.Tx",id:"hydrachaindirecttx",level:2},{value:"abortTx",id:"aborttx",level:3},{value:"collectComTx",id:"collectcomtx",level:3},{value:"Hydra.Chain.Direct.TimeHandle",id:"hydrachaindirecttimehandle",level:2},{value:"Hydra.Chain.Direct.State",id:"hydrachaindirectstate",level:2},{value:"fanout",id:"fanout",level:3},{value:"contest",id:"contest",level:3},{value:"close",id:"close",level:3},{value:"collectCom",id:"collectcom",level:3},{value:"abort",id:"abort",level:3},{value:"commit",id:"commit",level:3},{value:"init",id:"init",level:3},{value:"observeTx",id:"observetx",level:3},{value:"ChainState",id:"chainstate",level:3},{value:"JSON encoding of ChainState",id:"json-encoding-of-chainstate",level:4},{value:"Hydra.Chain.Direct.ScriptRegistry",id:"hydrachaindirectscriptregistry",level:2},{value:"Hydra.Chain.Direct.Handlers",id:"hydrachaindirecthandlers",level:2},{value:"Hydra.Chain.Direct.Contract",id:"hydrachaindirectcontract",level:2},{value:"Fanout",id:"fanout-1",level:3},{value:"Contest",id:"contest-1",level:3},{value:"Close",id:"close-1",level:3},{value:"CollectCom",id:"collectcom-1",level:3},{value:"Commit",id:"commit-1",level:3},{value:"Abort",id:"abort-1",level:3},{value:"Init",id:"init-1",level:3},{value:"Serializing commits",id:"serializing-commits",level:3},{value:"TxOut hashing",id:"txout-hashing",level:3},{value:"Signature validator",id:"signature-validator",level:3},{value:"Hydra.Behavior",id:"hydrabehavior",level:2},{value:"rolling back &amp; forward",id:"rolling-back--forward",level:3},{value:"Hydra Node Logging",id:"hydra-node-logging",level:3},{value:"JSON encoding of (HydraNodeLog SimpleTx)",id:"json-encoding-of-hydranodelog-simpletx",level:4},{value:"in an open head",id:"in-an-open-head",level:3},{value:"Two participant Head",id:"two-participant-head",level:3},{value:"Single participant Head",id:"single-participant-head",level:3},{value:"Sanity tests of test suite",id:"sanity-tests-of-test-suite",level:3},{value:"Hydra.API.ServerOutput",id:"hydraapiserveroutput",level:2},{value:"JSON encoding of (ReasonablySized (TimedServerOutput (Tx BabbageEra)))",id:"json-encoding-of-reasonablysized-timedserveroutput-tx-babbageera",level:3},{value:"JSON encoding of (ReasonablySized (ServerOutput (Tx BabbageEra)))",id:"json-encoding-of-reasonablysized-serveroutput-tx-babbageera",level:3},{value:"JSON encoding of (ReasonablySized (ServerOutput SimpleTx))",id:"json-encoding-of-reasonablysized-serveroutput-simpletx",level:3},{value:"Hydra.API.Server",id:"hydraapiserver",level:2},{value:"Hydra.API.ClientInput",id:"hydraapiclientinput",level:2},{value:"FromJSON (ValidatedTx era)",id:"fromjson-validatedtx-era",level:3},{value:"JSON encoding of (ReasonablySized (ClientInput (Tx BabbageEra)))",id:"json-encoding-of-reasonablysized-clientinput-tx-babbageera",level:3},{value:"JSON encoding of (ReasonablySized (ClientInput SimpleTx))",id:"json-encoding-of-reasonablysized-clientinput-simpletx",level:3}],m={toc:u};function k(e){var t=e.components,a=(0,l.Z)(e,r);return(0,i.kt)("wrapper",(0,n.Z)({},m,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"test-results-for-hydra-node"},"Test Results for hydra-node"),(0,i.kt)("h2",{id:"hydrasnapshotstrategy"},"Hydra.SnapshotStrategy"),(0,i.kt)("h3",{id:"new-snapshot-decision"},"New Snapshot Decision"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"sends ReqSn given is leader and no snapshot in flight and there's a seen tx")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"always ReqSn given head has 1 member and there's a seen tx"),(0,i.kt)("details",null,(0,i.kt)("summary",null,"Details"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},"+++ OK, passed 100 tests:\n90% ConfirmedSnapshot\n10% InitialSnapshot\n")))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"there's always a leader for every snapsnot number"),(0,i.kt)("details",null,(0,i.kt)("summary",null,"Details"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},"+++ OK, passed 100 tests; 16 discarded.\n")))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"do not send ReqSn when we aren't leader")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"do not send ReqSn when there is a snapshot in flight")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"do not send ReqSn when there's no seen transactions"))),(0,i.kt)("h4",{id:"snapshot-emission"},"Snapshot Emission"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"update seenSnapshot state when sending ReqSn")),(0,i.kt)("h2",{id:"hydrapersistence"},"Hydra.Persistence"),(0,i.kt)("h3",{id:"persistenceincremental"},"PersistenceIncremental"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"can handle empty files")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"is consistent after multiple append calls in presence of new-lines"),(0,i.kt)("details",null,(0,i.kt)("summary",null,"Details"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},"+++ OK, passed 200 tests:\n77.0% some item contains a new line\n 5.5% no items stored\n"))))),(0,i.kt)("h3",{id:"persistence"},"Persistence"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"can handle empty files")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"is consistent after save/load roundtrip"),(0,i.kt)("details",null,(0,i.kt)("summary",null,"Details"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},"+++ OK, passed 100 tests.\n"))))),(0,i.kt)("h2",{id:"hydraparty"},"Hydra.Party"),(0,i.kt)("h3",{id:"ord"},"Ord"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"is transitive"),(0,i.kt)("details",null,(0,i.kt)("summary",null,"Details"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},"+++ OK, passed 100 tests; 469 discarded.\n")))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"is reflexive"),(0,i.kt)("details",null,(0,i.kt)("summary",null,"Details"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},"+++ OK, passed 100 tests.\n")))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"is antisymmetric"),(0,i.kt)("details",null,(0,i.kt)("summary",null,"Details"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},"+++ OK, passed 100 tests.\n")))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"implements Eq and Ord correspondingly"),(0,i.kt)("details",null,(0,i.kt)("summary",null,"Details"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},"+++ OK, passed 100 tests.\n"))))),(0,i.kt)("h3",{id:"json-encoding-of-party"},"JSON encoding of Party"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"allows to encode values with aeson and read them back"),(0,i.kt)("details",null,(0,i.kt)("summary",null,"Details"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},"+++ OK, passed 100 tests.\n")))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"produces the same JSON as is found in golden/Party.json"))),(0,i.kt)("h2",{id:"hydraoptions"},"Hydra.Options"),(0,i.kt)("h3",{id:"hydra-node-runoptions"},"Hydra Node RunOptions"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"validateRunOptions: using more than 4 parties should error out")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"validateRunOptions: loaded cardano keys needs to match with the hydra keys length")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"parses with default node-id set")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"parses --host option given valid IPv4 and IPv6 addresses")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"parses --port option given valid port number")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"parses --peer ",(0,i.kt)("inlineCode",{parentName:"p"},"<host>:<port>")," option")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"does parse --peer given ipv6 addresses")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"parses --monitoring-port option given valid port number")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"parses --version flag as a parse error")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"parses --hydra-verification-key option as a filepath")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"parses --hydra-signing-key option as a filepath")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"parses --network-id option as a number")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"parses --mainnet flag")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"parses --node-socket as a filepath")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"parses --cardano-signing-key option as a filepath")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"parses --cardano-verification-key option as a filepath")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"parses --ledger-genesis-file as a filepath")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"parses --ledger-protocol-parameters-file as a filepath")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"parses --start-chain-from as a pair of slot number and block header hash")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"parses --hydra-scripts-tx-id as a tx id"),(0,i.kt)("details",null,(0,i.kt)("summary",null,"Details"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},"+++ OK, passed 100 tests.\n"))))),(0,i.kt)("h4",{id:"json-encoding-of-runoptions"},"JSON encoding of RunOptions"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"allows to encode values with aeson and read them back"),(0,i.kt)("details",null,(0,i.kt)("summary",null,"Details"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},"+++ OK, passed 100 tests.\n")))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"produces the same JSON as is found in golden/RunOptions.json")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"roundtrip parsing & printing"),(0,i.kt)("details",null,(0,i.kt)("summary",null,"Details"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},"+++ OK, passed 100 tests.\n"))))),(0,i.kt)("h4",{id:"publish-scripts-sub-command"},"publish-scripts sub-command"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"does not parse without any options"),(0,i.kt)("li",{parentName:"ul"},"does not parse with some missing option (1)"),(0,i.kt)("li",{parentName:"ul"},"does not parse with some missing option (2)"),(0,i.kt)("li",{parentName:"ul"},"does not parse with some missing option (3)"),(0,i.kt)("li",{parentName:"ul"},"should parse with all options")),(0,i.kt)("h2",{id:"hydranode"},"Hydra.Node"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"emits a single ReqSn and AckSn as leader, even after multiple ReqTxs"),(0,i.kt)("li",{parentName:"ul"},"rotates snapshot leaders"),(0,i.kt)("li",{parentName:"ul"},"processes out-of-order AckSn"),(0,i.kt)("li",{parentName:"ul"},"notifies client when postTx throws PostTxError")),(0,i.kt)("h2",{id:"hydranetworkheartbeat"},"Hydra.Network.Heartbeat"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"sends a heartbeat message with local host after 500 ms"),(0,i.kt)("li",{parentName:"ul"},"sends Connected when Ping received from other peer"),(0,i.kt)("li",{parentName:"ul"},"sends Connected when any message received from other party"),(0,i.kt)("li",{parentName:"ul"},"do not send Connected on subsequent messages from already Connected party"),(0,i.kt)("li",{parentName:"ul"},"sends Disconnected given no messages has been received from known party within twice heartbeat delay"),(0,i.kt)("li",{parentName:"ul"},"stop sending heartbeat message given action sends a message"),(0,i.kt)("li",{parentName:"ul"},"restart sending heartbeat messages given last message sent is older than heartbeat delay")),(0,i.kt)("h2",{id:"hydranetwork"},"Hydra.Network"),(0,i.kt)("h3",{id:"serialisation"},"Serialisation"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"can roundtrip CBOR encoding/decoding of Hydra Message"),(0,i.kt)("details",null,(0,i.kt)("summary",null,"Details"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},"+++ OK, passed 100 tests.\n"))))),(0,i.kt)("h4",{id:"json-encoding-of-message-simpletx"},"JSON encoding of (Message SimpleTx)"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"allows to encode values with aeson and read them back"),(0,i.kt)("details",null,(0,i.kt)("summary",null,"Details"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},"+++ OK, passed 100 tests.\n")))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"produces the same JSON as is found in golden/Message SimpleTx.json"))),(0,i.kt)("h3",{id:"ouroboros-network"},"Ouroboros Network"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"broadcasts messages to single connected peer"),(0,i.kt)("li",{parentName:"ul"},"broadcasts messages between 3 connected peers")),(0,i.kt)("h2",{id:"hydramodel"},"Hydra.Model"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"model should not generate 0 Ada UTxO"),(0,i.kt)("details",null,(0,i.kt)("summary",null,"Details"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},"+++ OK, passed 10000 tests.\n")))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"model generates consistent traces"),(0,i.kt)("details",null,(0,i.kt)("summary",null,"Details"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},"+++ OK, passed 10000 tests.\n")))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"implementation respects model"),(0,i.kt)("details",null,(0,i.kt)("summary",null,"Details"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},"+++ OK, passed 100 tests.\n\nActions (1210 in total):\n61.40% NewTx\n19.83% Commit\n 7.60% Seed\n 7.11% Init\n 4.05% Abort\n\nTransitions (1210 in total):\n61.40% Open -> Open\n18.10% Initial -> Initial\n 7.60% Start -> Idle\n 7.11% Idle -> Initial\n 4.05% Initial -> Final\n 1.74% Initial -> Open\n")))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"check conflict-free liveness"),(0,i.kt)("details",null,(0,i.kt)("summary",null,"Details"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},"+++ OK, passed 100 tests.\n\nActions (1221 in total):\n47.99% NewTx\n25.80% Commit\n 8.19% Seed\n 8.11% Init\n 5.98% Abort\n 1.97% ObserveConfirmedTx\n 1.97% Wait\n\nTransitions (1221 in total):\n51.92% Open -> Open\n23.83% Initial -> Initial\n 8.19% Start -> Idle\n 8.11% Idle -> Initial\n 5.98% Initial -> Final\n 1.97% Initial -> Open\n"))))),(0,i.kt)("h2",{id:"hydraloggingmonitoring"},"Hydra.Logging.Monitoring"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"provides prometheus metrics from traces")),(0,i.kt)("h2",{id:"hydralogging"},"Hydra.Logging"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"dumps logs to stdout in JSON with timestamp")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"HydraLog"),(0,i.kt)("details",null,(0,i.kt)("summary",null,"Details"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},"+++ OK, passed 1 test.\n"))))),(0,i.kt)("h2",{id:"hydraledgersimple"},"Hydra.Ledger.Simple"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"validates only correctly built transactions"),(0,i.kt)("details",null,(0,i.kt)("summary",null,"Details"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},"+++ OK, passed 100 tests.\n"))))),(0,i.kt)("h2",{id:"hydraledgercardano"},"Hydra.Ledger.Cardano"),(0,i.kt)("h3",{id:"json-encoding-of-tx-babbageera"},"JSON encoding of (Tx BabbageEra)"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"allows to encode values with aeson and read them back"),(0,i.kt)("details",null,(0,i.kt)("summary",null,"Details"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},"+++ OK, passed 100 tests.\n")))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"produces the same JSON as is found in golden/Tx BabbageEra.json"))),(0,i.kt)("h3",{id:"json-encoding-of-utxo-txout-ctxutxo-babbageera"},"JSON encoding of (UTxO' (TxOut CtxUTxO BabbageEra))"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"allows to encode values with aeson and read them back"),(0,i.kt)("details",null,(0,i.kt)("summary",null,"Details"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},"+++ OK, passed 100 tests.\n")))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"produces the same JSON as is found in golden/UTxO' (TxOut CtxUTxO BabbageEra).json"))),(0,i.kt)("h3",{id:"json-encoding-of-assetname"},"JSON encoding of AssetName"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"allows to encode values with aeson and read them back"),(0,i.kt)("details",null,(0,i.kt)("summary",null,"Details"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},"+++ OK, passed 100 tests.\n")))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"produces the same JSON as is found in golden/AssetName.json")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Same TxId before/after JSON encoding"),(0,i.kt)("details",null,(0,i.kt)("summary",null,"Details"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},"+++ OK, passed 100 tests.\n")))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Roundtrip to and from Ledger"),(0,i.kt)("details",null,(0,i.kt)("summary",null,"Details"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},"+++ OK, passed 100 tests.\n")))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"CBOR encoding of Tx"),(0,i.kt)("details",null,(0,i.kt)("summary",null,"Details"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},"+++ OK, passed 100 tests.\n")))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"applies valid transaction"),(0,i.kt)("details",null,(0,i.kt)("summary",null,"Details"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},"+++ OK, passed 100 tests.\n")))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"applies valid transaction serialised from JSON"),(0,i.kt)("details",null,(0,i.kt)("summary",null,"Details"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},"+++ OK, passed 100 tests.\n")))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"should parse a Cardano.UTxO")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"should parse a Tx"))),(0,i.kt)("h3",{id:"evaluate-helpers"},"Evaluate helpers"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"slotNoFromUTCTime . slotNoToUTCTime === id"),(0,i.kt)("details",null,(0,i.kt)("summary",null,"Details"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},"+++ OK, passed 100 tests.\n"))))),(0,i.kt)("h3",{id:"generators"},"Generators"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"arbitrary @TxIn is reasonably collision resistant"),(0,i.kt)("details",null,(0,i.kt)("summary",null,"Details"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},"+++ OK, passed 100000 tests.\n")))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"arbitrary @TxId is reasonably collision resistant"),(0,i.kt)("details",null,(0,i.kt)("summary",null,"Details"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},"+++ OK, passed 100000 tests.\n")))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"arbitrary @(VerificationKey PaymentKey) is reasonably collision resistant"),(0,i.kt)("details",null,(0,i.kt)("summary",null,"Details"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},"+++ OK, passed 100000 tests.\n")))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"arbitrary @(Hash PaymentKey) is reasonably collision resistant"),(0,i.kt)("details",null,(0,i.kt)("summary",null,"Details"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},"+++ OK, passed 100000 tests.\n")))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"genUTxOAlonzo does not generate collapsing values"),(0,i.kt)("details",null,(0,i.kt)("summary",null,"Details"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},"+++ OK, passed 100 tests.\n")))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"genUTxOAdaOnlyOfSize does not generate collapsing values"),(0,i.kt)("details",null,(0,i.kt)("summary",null,"Details"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},"+++ OK, passed 100 tests.\n")))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"genUTxOFor is reasonably collision resistant"),(0,i.kt)("details",null,(0,i.kt)("summary",null,"Details"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},"+++ OK, passed 100000 tests.\n")))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"genOneUTxOFor is reasonably collision resistant"),(0,i.kt)("details",null,(0,i.kt)("summary",null,"Details"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},"+++ OK, passed 100000 tests.\n"))))),(0,i.kt)("h2",{id:"hydraheadlogic"},"Hydra.HeadLogic"),(0,i.kt)("h3",{id:"coordinated-head-protocol"},"Coordinated Head Protocol"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"rejects if a requested tx is expired")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"waits if a requested tx is not (yet) applicable")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"confirms snapshot given it receives AckSn from all parties")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"does not confirm snapshot when given a non-matching signature produced from a different message")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"does not confirm snapshot when given a non-matching signature produced from a different key")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"waits if we receive a snapshot with not-yet-seen transactions")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"waits if we receive an AckSn for an unseen snapshot")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"waits if we receive a future snapshot")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"waits if we receive a future snapshot while collecting signatures")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"acks signed snapshot from the constant leader")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"does not ack snapshots from non-leaders")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"rejects too-old snapshots")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"rejects too-old snapshots when collecting signatures")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"wait given too new snapshots from the leader")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"rejects overlapping snapshot requests from the leader")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"ignores in-flight ReqTx when closed")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"notifies client when it receives a ping")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"cannot observe abort after collect com")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"cannot observe collect com after abort")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"notify user on head closing and when passing the contestation deadline")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"notify user on rollback"),(0,i.kt)("details",null,(0,i.kt)("summary",null,"Details"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},"+++ OK, passed 100 tests.\n")))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"contests when detecting close with old snapshot")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"re-contests when detecting contest with old snapshot"))),(0,i.kt)("h3",{id:"types"},"Types"),(0,i.kt)("h4",{id:"json-encoding-of-headstate-simpletx"},"JSON encoding of (HeadState SimpleTx)"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"allows to encode values with aeson and read them back"),(0,i.kt)("details",null,(0,i.kt)("summary",null,"Details"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},"+++ OK, passed 100 tests.\n")))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"produces the same JSON as is found in golden/HeadState SimpleTx.json"))),(0,i.kt)("h4",{id:"json-encoding-of-event-simpletx"},"JSON encoding of (Event SimpleTx)"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"allows to encode values with aeson and read them back"),(0,i.kt)("details",null,(0,i.kt)("summary",null,"Details"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},"+++ OK, passed 100 tests.\n")))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"produces the same JSON as is found in golden/Event SimpleTx.json"))),(0,i.kt)("h2",{id:"hydrafireforget"},"Hydra.FireForget"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"client can send 'Hail Hydra!' to server")),(0,i.kt)("h2",{id:"hydracrypto"},"Hydra.Crypto"),(0,i.kt)("h3",{id:"multisignature"},"MultiSignature"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"is sensitive to order"),(0,i.kt)("details",null,(0,i.kt)("summary",null,"Details"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},"+++ OK, passed 100 tests; 52 discarded.\n"))))),(0,i.kt)("h3",{id:"signature"},"Signature"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"show includes escaped hex")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"can sign arbitrary messages"),(0,i.kt)("details",null,(0,i.kt)("summary",null,"Details"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},"+++ OK, passed 100 tests; 32 discarded.\n")))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"sign/verify roundtrip"),(0,i.kt)("details",null,(0,i.kt)("summary",null,"Details"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},"+++ OK, passed 100 tests.\n"))))),(0,i.kt)("h3",{id:"verificationkey"},"VerificationKey"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"show includes escaped hex")),(0,i.kt)("h4",{id:"json-encoding-of-verificationkey-hydrakey"},"JSON encoding of (VerificationKey HydraKey)"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"allows to encode values with aeson and read them back"),(0,i.kt)("details",null,(0,i.kt)("summary",null,"Details"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},"+++ OK, passed 100 tests.\n")))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"produces the same JSON as is found in golden/VerificationKey HydraKey.json"))),(0,i.kt)("h3",{id:"signingkey"},"SigningKey"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"show includes escaped hex")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"can be generated when seed exceeds the max seed size for algorithm")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"can be generated"),(0,i.kt)("details",null,(0,i.kt)("summary",null,"Details"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},"+++ OK, passed 100 tests; 31 discarded.\n"))))),(0,i.kt)("h2",{id:"hydrachaindirectwallet"},"Hydra.Chain.Direct.Wallet"),(0,i.kt)("h3",{id:"newtinywallet"},"newTinyWallet"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"initialises wallet by querying UTxO"),(0,i.kt)("details",null,(0,i.kt)("summary",null,"Details"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},"+++ OK, passed 100 tests.\n")))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"re-queries UTxO from the reset point"),(0,i.kt)("details",null,(0,i.kt)("summary",null,"Details"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},"+++ OK, passed 100 tests.\n"))))),(0,i.kt)("h3",{id:"coverfee"},"coverFee"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"balances transaction with fees"),(0,i.kt)("details",null,(0,i.kt)("summary",null,"Details"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},"+++ OK, passed 100 tests.\n"))))),(0,i.kt)("h3",{id:"applyblock"},"applyBlock"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"only reduces the UTXO set when no address is ours"),(0,i.kt)("details",null,(0,i.kt)("summary",null,"Details"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},"+++ OK, passed 100 tests.\n")))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Seen inputs are consumed and not in the resulting UTXO"),(0,i.kt)("details",null,(0,i.kt)("summary",null,"Details"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},"+++ OK, passed 100 tests.\n"))))),(0,i.kt)("h3",{id:"genblock--genutxo"},"genBlock / genUTxO"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"are well-suited for testing"),(0,i.kt)("details",null,(0,i.kt)("summary",null,"Details"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},"+++ OK, passed 100 tests:\n44% has dependent txs\n28% has no tx that are ours\n"))))),(0,i.kt)("h2",{id:"hydrachaindirecttx"},"Hydra.Chain.Direct.Tx"),(0,i.kt)("h3",{id:"aborttx"},"abortTx"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"validates"),(0,i.kt)("details",null,(0,i.kt)("summary",null,"Details"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},"+++ OK, passed 100 tests (100% Success).\n")))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"cover fee correctly handles redeemers"),(0,i.kt)("details",null,(0,i.kt)("summary",null,"Details"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},"+++ OK, passed 60 tests (100% No fuel UTxO found).\n"))))),(0,i.kt)("h3",{id:"collectcomtx"},"collectComTx"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"validates"),(0,i.kt)("details",null,(0,i.kt)("summary",null,"Details"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},"+++ OK, passed 10 tests.\n"))))),(0,i.kt)("h2",{id:"hydrachaindirecttimehandle"},"Hydra.Chain.Direct.TimeHandle"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"can roundtrip currentPointInTime"),(0,i.kt)("details",null,(0,i.kt)("summary",null,"Details"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},"+++ OK, passed 100 tests.\n")))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"should convert slot within latest/current era"))),(0,i.kt)("h2",{id:"hydrachaindirectstate"},"Hydra.Chain.Direct.State"),(0,i.kt)("h3",{id:"fanout"},"fanout"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"transaction size is below 16kB"),(0,i.kt)("details",null,(0,i.kt)("summary",null,"Details"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},"+++ OK, passed 100 tests:\n43% Fanout size: 50-70\n37% Fanout size: 10-49\n20% Fanout size: 00-10\n\n40% 15kB\n34% 13kB\n26% 14kB\n")))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"validates within maxTxExecutionUnits"),(0,i.kt)("details",null,(0,i.kt)("summary",null,"Details"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},"+++ OK, passed 100 tests:\n43% Fanout size: 50-70\n37% Fanout size: 10-49\n20% Fanout size: 00-10\n"))))),(0,i.kt)("h3",{id:"contest"},"contest"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"transaction size is below 16kB"),(0,i.kt)("details",null,(0,i.kt)("summary",null,"Details"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},"+++ OK, passed 100 tests (100% 9kB).\n\nClose point (slot) (100 in total):\n100% > 0\n\nContestation period (100 in total):\n17% > k blocks\n15% < k blocks\n15% one month\n15% one week\n15% one year\n12% k blocks on mainnet\n11% one day\n")))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"validates within maxTxExecutionUnits"),(0,i.kt)("details",null,(0,i.kt)("summary",null,"Details"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},"+++ OK, passed 100 tests.\n\nClose point (slot) (100 in total):\n100% > 0\n\nContestation period (100 in total):\n17% > k blocks\n15% < k blocks\n15% one month\n15% one week\n15% one year\n12% k blocks on mainnet\n11% one day\n"))))),(0,i.kt)("h3",{id:"close"},"close"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"transaction size is below 16kB"),(0,i.kt)("details",null,(0,i.kt)("summary",null,"Details"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},"+++ OK, passed 100 tests:\n95% ConfirmedSnapshot\n 5% InitialSnapshot\n\n100% 9kB\n")))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"validates within maxTxExecutionUnits"),(0,i.kt)("details",null,(0,i.kt)("summary",null,"Details"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},"+++ OK, passed 100 tests:\n95% ConfirmedSnapshot\n 5% InitialSnapshot\n"))))),(0,i.kt)("h3",{id:"collectcom"},"collectCom"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"transaction size is below 16kB"),(0,i.kt)("details",null,(0,i.kt)("summary",null,"Details"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},"+++ OK, passed 100 tests (100% 13kB).\n")))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"validates within maxTxExecutionUnits"),(0,i.kt)("details",null,(0,i.kt)("summary",null,"Details"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},"+++ OK, passed 100 tests.\n"))))),(0,i.kt)("h3",{id:"abort"},"abort"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"transaction size is below 16kB"),(0,i.kt)("details",null,(0,i.kt)("summary",null,"Details"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},"+++ OK, passed 100 tests:\n35% Abort immediately, after 0 commits\n34% Abort after some (but not all) commits\n31% Abort after all commits\n\n98% 13kB\n 2% 14kB\n")))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"validates within maxTxExecutionUnits"),(0,i.kt)("details",null,(0,i.kt)("summary",null,"Details"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},"+++ OK, passed 100 tests:\n35% Abort immediately, after 0 commits\n34% Abort after some (but not all) commits\n31% Abort after all commits\n")))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"ignore aborts of other heads"),(0,i.kt)("details",null,(0,i.kt)("summary",null,"Details"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},"+++ OK, passed 100 tests.\n"))))),(0,i.kt)("h3",{id:"commit"},"commit"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"transaction size is below 16kB"),(0,i.kt)("details",null,(0,i.kt)("summary",null,"Details"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},"+++ OK, passed 100 tests:\n92% Non-empty commit\n 8% Empty commit\n\n100% 5kB\n")))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"validates within maxTxExecutionUnits"),(0,i.kt)("details",null,(0,i.kt)("summary",null,"Details"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},"+++ OK, passed 100 tests:\n92% Non-empty commit\n 8% Empty commit\n")))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"consumes all inputs that are committed"),(0,i.kt)("details",null,(0,i.kt)("summary",null,"Details"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},"+++ OK, passed 100 tests:\n92% Non-empty commit\n 8% Empty commit\n")))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"can only be applied / observed once"),(0,i.kt)("details",null,(0,i.kt)("summary",null,"Details"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},"+++ OK, passed 100 tests:\n92% Non-empty commit\n 8% Empty commit\n")))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"reject Commits of Byron outputs"),(0,i.kt)("details",null,(0,i.kt)("summary",null,"Details"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},"+++ OK, passed 100 tests.\n"))))),(0,i.kt)("h3",{id:"init"},"init"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"transaction size is below 16kB"),(0,i.kt)("details",null,(0,i.kt)("summary",null,"Details"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},"+++ OK, passed 100 tests:\n58% 2+ parties\n42% 1 party\n\n74% 4kB\n26% 5kB\n")))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"validates within maxTxExecutionUnits"),(0,i.kt)("details",null,(0,i.kt)("summary",null,"Details"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},"+++ OK, passed 100 tests:\n58% 2+ parties\n42% 1 party\n")))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"is not observed if not invited"),(0,i.kt)("details",null,(0,i.kt)("summary",null,"Details"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},"+++ OK, passed 100 tests; 34 discarded.\n"))))),(0,i.kt)("h3",{id:"observetx"},"observeTx"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"All valid transitions for all possible states can be observed."),(0,i.kt)("details",null,(0,i.kt)("summary",null,"Details"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},"+++ OK, passed 100 tests.\n\nChainTransition (100 in total):\n21% Close\n20% Fanout\n17% Contest\n14% Collect\n14% Commit\n14% Init\n"))))),(0,i.kt)("h3",{id:"chainstate"},"ChainState"),(0,i.kt)("h4",{id:"json-encoding-of-chainstate"},"JSON encoding of ChainState"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"allows to encode values with aeson and read them back"),(0,i.kt)("details",null,(0,i.kt)("summary",null,"Details"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},"+++ OK, passed 100 tests.\n")))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"produces the same JSON as is found in golden/ChainState.json"))),(0,i.kt)("h2",{id:"hydrachaindirectscriptregistry"},"Hydra.Chain.Direct.ScriptRegistry"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"newScriptRegistry (registryUTxO r) === Just r"),(0,i.kt)("details",null,(0,i.kt)("summary",null,"Details"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},"+++ OK, passed 100 tests.\n"))))),(0,i.kt)("h2",{id:"hydrachaindirecthandlers"},"Hydra.Chain.Direct.Handlers"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"roll forward results in Tick events"),(0,i.kt)("details",null,(0,i.kt)("summary",null,"Details"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},"+++ OK, passed 100 tests.\n")))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"roll forward fails with outdated TimeHandle"),(0,i.kt)("details",null,(0,i.kt)("summary",null,"Details"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},"+++ OK, passed 100 tests.\n")))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"yields observed transactions rolling forward"),(0,i.kt)("details",null,(0,i.kt)("summary",null,"Details"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},"+++ OK, passed 100 tests:\n19% Init\n18% Fanout\n17% Close\n17% Contest\n16% Commit\n13% Collect\n")))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"yields rollback events onRollBackward"),(0,i.kt)("details",null,(0,i.kt)("summary",null,"Details"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},"+++ OK, passed 100 tests:\n18% Rollback to: ChainSlot 1 / 2\n13% Rollback to: ChainSlot 2 / 2\n13% Rollback to: ChainSlot 2 / 4\n12% Rollback to: ChainSlot 3 / 3\n11% Rollback to: ChainSlot 1 / 3\n11% Rollback to: ChainSlot 2 / 3\n 9% Rollback to: ChainSlot 1 / 4\n 8% Rollback to: ChainSlot 3 / 4\n 5% Rollback to: ChainSlot 4 / 4\n"))))),(0,i.kt)("h2",{id:"hydrachaindirectcontract"},"Hydra.Chain.Direct.Contract"),(0,i.kt)("h3",{id:"fanout-1"},"Fanout"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"is healthy"),(0,i.kt)("details",null,(0,i.kt)("summary",null,"Details"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},"+++ OK, passed 1 test.\n")))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"does not survive random adversarial mutations"),(0,i.kt)("details",null,(0,i.kt)("summary",null,"Details"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},"+++ OK, passed 100 tests.\n\nFanoutMutation (100 in total):\n36% MutateValidityBeforeDeadline\n33% MutateChangeOutputValue\n31% MutateAddUnexpectedOutput\n"))))),(0,i.kt)("h3",{id:"contest-1"},"Contest"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"is healthy"),(0,i.kt)("details",null,(0,i.kt)("summary",null,"Details"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},"+++ OK, passed 1 test.\n")))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"does not survive random adversarial mutations"),(0,i.kt)("details",null,(0,i.kt)("summary",null,"Details"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},"+++ OK, passed 100 tests.\n\nContestMutation (100 in total):\n21% MutateContestUTxOHash\n20% MutateValidityPastDeadline\n17% MutateParties\n14% MutateRequiredSigner\n14% MutateSignatureButNotSnapshotNumber\n14% MutateToNonNewerSnapshot\n"))))),(0,i.kt)("h3",{id:"close-1"},"Close"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"is healthy"),(0,i.kt)("details",null,(0,i.kt)("summary",null,"Details"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},"+++ OK, passed 1 test.\n")))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"does not survive random adversarial mutations"),(0,i.kt)("details",null,(0,i.kt)("summary",null,"Details"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},"+++ OK, passed 200 tests.\n\nCloseMutation (200 in total):\n14.5% MutateParties\n13.5% MutateCloseUTxOHash\n13.0% MutateValidityInterval\n12.5% MutateSignatureButNotSnapshotNumber\n12.5% MutateSnapshotNumberButNotSignature\n12.0% MutateCloseContestationDeadline\n12.0% MutateRequiredSigner\n10.0% MutateSnapshotToIllFormedValue\n"))))),(0,i.kt)("h3",{id:"collectcom-1"},"CollectCom"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"is healthy"),(0,i.kt)("details",null,(0,i.kt)("summary",null,"Details"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},"+++ OK, passed 1 test.\n")))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"does not survive random adversarial mutations"),(0,i.kt)("details",null,(0,i.kt)("summary",null,"Details"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},"+++ OK, passed 100 tests.\n\nCollectComMutation (100 in total):\n21% MutateNumberOfParties\n20% MutateRequiredSigner\n17% MutateHeadId\n14% MutateHeadScriptInput\n14% MutateHeadTransition\n14% MutateOpenUTxOHash\n"))))),(0,i.kt)("h3",{id:"commit-1"},"Commit"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"is healthy"),(0,i.kt)("details",null,(0,i.kt)("summary",null,"Details"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},"+++ OK, passed 1 test.\n")))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"does not survive random adversarial mutations"),(0,i.kt)("details",null,(0,i.kt)("summary",null,"Details"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},"+++ OK, passed 100 tests.\n\nCommitMutation (100 in total):\n32% MutateRequiredSigner\n27% MutateCommittedValue\n21% MutateCommitOutputValue\n20% MutateCommittedAddress\n"))))),(0,i.kt)("h3",{id:"abort-1"},"Abort"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"is healthy"),(0,i.kt)("details",null,(0,i.kt)("summary",null,"Details"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},"+++ OK, passed 100 tests.\n")))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"does not survive random adversarial mutations"),(0,i.kt)("details",null,(0,i.kt)("summary",null,"Details"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},"+++ OK, passed 400 tests.\n\nAbortMutation (400 in total):\n13.0% MutateHeadId\n12.8% UseInputFromOtherHead\n12.5% DropCollectedInput\n12.2% MutateThreadTokenQuantity\n12.0% BurnOneTokenMore\n11.0% MutateParties\n 9.8% MutateHeadScriptInput\n 9.0% MutateRequiredSigner\n 7.8% DropOneCommitOutput\n"))))),(0,i.kt)("h3",{id:"init-1"},"Init"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"is healthy"),(0,i.kt)("details",null,(0,i.kt)("summary",null,"Details"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},"+++ OK, passed 1 test.\n")))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"does not survive random adversarial mutations"),(0,i.kt)("details",null,(0,i.kt)("summary",null,"Details"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},"+++ OK, passed 100 tests.\n\nInitMutation (100 in total):\n24% MutateDropSeedInput\n21% MutateDropInitialOutput\n20% MutateAddAnotherPT\n18% MutateInitialOutputValue\n17% MutateThreadTokenQuantity\n"))))),(0,i.kt)("h3",{id:"serializing-commits"},"Serializing commits"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"deserializeCommit . serializeCommit === id"),(0,i.kt)("details",null,(0,i.kt)("summary",null,"Details"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},"+++ OK, passed 100 tests.\n"))))),(0,i.kt)("h3",{id:"txout-hashing"},"TxOut hashing"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"OffChain.hashUTxO == OnChain.hashTxOuts (on sorted tx outs)"),(0,i.kt)("details",null,(0,i.kt)("summary",null,"Details"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},"+++ OK, passed 20 tests.\n")))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"OnChain.hashPreSerializedCommits == OnChain.hashTxOuts (on sorted tx outs)"),(0,i.kt)("details",null,(0,i.kt)("summary",null,"Details"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},"+++ OK, passed 20 tests.\n"))))),(0,i.kt)("h3",{id:"signature-validator"},"Signature validator"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"verifies single signature produced off-chain"),(0,i.kt)("details",null,(0,i.kt)("summary",null,"Details"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},"+++ OK, passed 100 tests.\n")))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"verifies snapshot multi-signature for list of parties and signatures"),(0,i.kt)("details",null,(0,i.kt)("summary",null,"Details"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},"+++ OK, passed 100 tests.\n"))))),(0,i.kt)("h2",{id:"hydrabehavior"},"Hydra.Behavior"),(0,i.kt)("h3",{id:"rolling-back--forward"},"rolling back & forward"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"does work for rollbacks past init"),(0,i.kt)("li",{parentName:"ul"},"does work for rollbacks past open")),(0,i.kt)("h3",{id:"hydra-node-logging"},"Hydra Node Logging"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"traces processing of events"),(0,i.kt)("li",{parentName:"ul"},"traces handling of effects")),(0,i.kt)("h4",{id:"json-encoding-of-hydranodelog-simpletx"},"JSON encoding of (HydraNodeLog SimpleTx)"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"allows to encode values with aeson and read them back"),(0,i.kt)("details",null,(0,i.kt)("summary",null,"Details"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},"+++ OK, passed 100 tests.\n")))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"produces the same JSON as is found in golden/HydraNodeLog SimpleTx.json"))),(0,i.kt)("h3",{id:"in-an-open-head"},"in an open head"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"sees the head closed by other nodes"),(0,i.kt)("li",{parentName:"ul"},"valid new transactions are seen by all parties"),(0,i.kt)("li",{parentName:"ul"},"sending two conflicting transactions should lead one being confirmed and one expired"),(0,i.kt)("li",{parentName:"ul"},"valid new transactions get snapshotted"),(0,i.kt)("li",{parentName:"ul"},"reports transactions as seen only when they validate (against the confirmed ledger)"),(0,i.kt)("li",{parentName:"ul"},"multiple transactions get snapshotted"),(0,i.kt)("li",{parentName:"ul"},"outputs utxo from confirmed snapshot when client requests it"),(0,i.kt)("li",{parentName:"ul"},"can be finalized by all parties after contestation period"),(0,i.kt)("li",{parentName:"ul"},"contest automatically when detecting closing with old snapshot")),(0,i.kt)("h3",{id:"two-participant-head"},"Two participant Head"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"only opens the head after all nodes committed"),(0,i.kt)("li",{parentName:"ul"},"can abort and re-open a head when one party has not committed"),(0,i.kt)("li",{parentName:"ul"},"cannot abort head when commits have been collected"),(0,i.kt)("li",{parentName:"ul"},"cannot commit twice"),(0,i.kt)("li",{parentName:"ul"},"outputs committed utxo when client requests it")),(0,i.kt)("h3",{id:"single-participant-head"},"Single participant Head"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"accepts Init command"),(0,i.kt)("li",{parentName:"ul"},"accepts Commit after successful Init"),(0,i.kt)("li",{parentName:"ul"},"not accepts commits when the head is open"),(0,i.kt)("li",{parentName:"ul"},"can close an open head"),(0,i.kt)("li",{parentName:"ul"},"does not fanout automatically"),(0,i.kt)("li",{parentName:"ul"},"does finalize head after contestation period upon command")),(0,i.kt)("h3",{id:"sanity-tests-of-test-suite"},"Sanity tests of test suite"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"does not delay for real")),(0,i.kt)("h2",{id:"hydraapiserveroutput"},"Hydra.API.ServerOutput"),(0,i.kt)("h3",{id:"json-encoding-of-reasonablysized-timedserveroutput-tx-babbageera"},"JSON encoding of (ReasonablySized (TimedServerOutput (Tx BabbageEra)))"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"allows to encode values with aeson and read them back"),(0,i.kt)("details",null,(0,i.kt)("summary",null,"Details"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},"+++ OK, passed 100 tests.\n")))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"produces the same JSON as is found in golden/ReasonablySized (TimedServerOutput (Tx BabbageEra)).json"))),(0,i.kt)("h3",{id:"json-encoding-of-reasonablysized-serveroutput-tx-babbageera"},"JSON encoding of (ReasonablySized (ServerOutput (Tx BabbageEra)))"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"allows to encode values with aeson and read them back"),(0,i.kt)("details",null,(0,i.kt)("summary",null,"Details"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},"+++ OK, passed 100 tests.\n")))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"produces the same JSON as is found in golden/ReasonablySized (ServerOutput (Tx BabbageEra)).json"))),(0,i.kt)("h3",{id:"json-encoding-of-reasonablysized-serveroutput-simpletx"},"JSON encoding of (ReasonablySized (ServerOutput SimpleTx))"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"allows to encode values with aeson and read them back"),(0,i.kt)("details",null,(0,i.kt)("summary",null,"Details"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},"+++ OK, passed 100 tests.\n")))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"produces the same JSON as is found in golden/ReasonablySized (ServerOutput SimpleTx).json"))),(0,i.kt)("h2",{id:"hydraapiserver"},"Hydra.API.Server"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"greets")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"sends sendOutput to all connected clients")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"sends all sendOutput history to all connected clients after a restart")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"echoes history (past outputs) to client upon reconnection"),(0,i.kt)("details",null,(0,i.kt)("summary",null,"Details"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},"+++ OK, passed 100 tests:\n92% more than one message when reconnecting\n 5% no message when reconnecting\n 3% only one message when reconnecting\n")))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"sequence numbers are continuous and strictly monotonically increasing"),(0,i.kt)("details",null,(0,i.kt)("summary",null,"Details"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},"+++ OK, passed 100 tests.\n")))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"sends an error when input cannot be decoded"))),(0,i.kt)("h2",{id:"hydraapiclientinput"},"Hydra.API.ClientInput"),(0,i.kt)("h3",{id:"fromjson-validatedtx-era"},"FromJSON (ValidatedTx era)"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"accepts transactions produced via cardano-cli"),(0,i.kt)("details",null,(0,i.kt)("summary",null,"Details"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},"+++ OK, passed 100 tests.\n")))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"accepts raw CBOR-base16-encoded transactions"),(0,i.kt)("details",null,(0,i.kt)("summary",null,"Details"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},"+++ OK, passed 100 tests.\n"))))),(0,i.kt)("h3",{id:"json-encoding-of-reasonablysized-clientinput-tx-babbageera"},"JSON encoding of (ReasonablySized (ClientInput (Tx BabbageEra)))"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"allows to encode values with aeson and read them back"),(0,i.kt)("details",null,(0,i.kt)("summary",null,"Details"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},"+++ OK, passed 100 tests.\n")))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"produces the same JSON as is found in golden/ReasonablySized (ClientInput (Tx BabbageEra)).json"))),(0,i.kt)("h3",{id:"json-encoding-of-reasonablysized-clientinput-simpletx"},"JSON encoding of (ReasonablySized (ClientInput SimpleTx))"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"allows to encode values with aeson and read them back"),(0,i.kt)("details",null,(0,i.kt)("summary",null,"Details"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},"+++ OK, passed 100 tests.\n")))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"produces the same JSON as is found in golden/ReasonablySized (ClientInput SimpleTx).json"))))}k.isMDXComponent=!0}}]);