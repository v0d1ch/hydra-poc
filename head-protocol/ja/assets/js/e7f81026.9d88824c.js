"use strict";(self.webpackChunkhydra_head_protocol_docs=self.webpackChunkhydra_head_protocol_docs||[]).push([[5389],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return d}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var i=r.createContext({}),c=function(e){var t=r.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},p=function(e){var t=c(e.components);return r.createElement(i.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},f=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,i=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),f=c(n),d=a,m=f["".concat(i,".").concat(d)]||f[d]||u[d]||o;return n?r.createElement(m,s(s({ref:t},p),{},{components:n})):r.createElement(m,s({ref:t},p))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,s=new Array(o);s[0]=f;var l={};for(var i in t)hasOwnProperty.call(t,i)&&(l[i]=t[i]);l.originalType=e,l.mdxType="string"==typeof e?e:a,s[1]=l;for(var c=2;c<o;c++)s[c]=n[c];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}f.displayName="MDXCreateElement"},3616:function(e,t,n){n.r(t),n.d(t,{assets:function(){return p},contentTitle:function(){return i},default:function(){return d},frontMatter:function(){return l},metadata:function(){return c},toc:function(){return u}});var r=n(7462),a=n(3366),o=(n(7294),n(3905)),s=["components"],l={slug:4,title:"4. Use Handle to model Effects\n",authors:[],tags:["Accepted"]},i=void 0,c={permalink:"/head-protocol/ja/adr/4",source:"@site/adr/2021-06-08_004-use-handle-to-model-effects.md",title:"4. Use Handle to model Effects\n",description:"Status",date:"2021-06-08T00:00:00.000Z",formattedDate:"2021\u5e746\u67088\u65e5",tags:[{label:"Accepted",permalink:"/head-protocol/ja/adr/tags/accepted"}],readingTime:1.355,truncated:!1,authors:[],frontMatter:{slug:"4",title:"4. Use Handle to model Effects\n",authors:[],tags:["Accepted"]},prevItem:{title:"3. Asynchronous Duplex Client API",permalink:"/head-protocol/ja/adr/3"},nextItem:{title:"5. Use io-classes\n",permalink:"/head-protocol/ja/adr/5"}},p={authorsImageUrls:[]},u=[{value:"Status",id:"status",level:2},{value:"Context",id:"context",level:2},{value:"Decision",id:"decision",level:2},{value:"Consequences",id:"consequences",level:2}],f={toc:u};function d(e){var t=e.components,n=(0,a.Z)(e,s);return(0,o.kt)("wrapper",(0,r.Z)({},f,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"status"},"Status"),(0,o.kt)("p",null,"Accepted"),(0,o.kt)("h2",{id:"context"},"Context"),(0,o.kt)("p",null,"Given we are structuring Hydra node as a ",(0,o.kt)("a",{parentName:"p",href:"/adr/2"},"reactive core")," we need a way to ensure a strict separation of pure and impure (or effectful) code."),(0,o.kt)("p",null,"We want to be able to test those impure/effectful parts of the code. This requires a means for exchanging the actual implementation for e.g. the function to send messages over a network."),(0,o.kt)("p",null,"Also we want the ability to swap implementations not only for testing, but also be able\nto accommodate different usage scenarios, e.g. use a different middleware\ndepending on peer configuration."),(0,o.kt)("p",null,"In Haskell there are various common ",(0,o.kt)("em",{parentName:"p"},"patterns")," to model effects:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"http://okmij.org/ftp/tagless-final/index.html"},"Tagless final encoding")," also known as ",(0,o.kt)("em",{parentName:"li"},"MTL-style")," although using typeclasses to implement is ",(0,o.kt)("a",{parentName:"li",href:"https://www.foxhound.systems/blog/final-tagless/"},"not necessary"),", whereby Effect(s) are expressed as typeclass(es) which are propagated as constraints"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://reasonablypolymorphic.com/blog/freer-monads/"},"Free monads"),", or any variant thereof like Eff, freer, extensible-effects, whereby effect(s) are expressed as ADTs which are ",(0,o.kt)("em",{parentName:"li"},"interpreted")," in the context of an ",(0,o.kt)("em",{parentName:"li"},"Effect stack")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://jaspervdj.be/posts/2018-03-08-handle-pattern.html"},"Handle")," pattern also known as ",(0,o.kt)("em",{parentName:"li"},"record-of-functions")," whereby effects are grouped together in a datatype with a single record constructor")),(0,o.kt)("p",null,"(These tradeoffs also appear in other functional languages like\n",(0,o.kt)("a",{parentName:"p",href:"https://medium.com/@dogwith1eye/prefer-records-of-functions-to-interfaces-d6413af4d2c3"},"F#"),")"),(0,o.kt)("p",null,"There is not one most favored solution though and we all have various\nexperiences with these techniques."),(0,o.kt)("h2",{id:"decision"},"Decision"),(0,o.kt)("p",null,"Effectful components of the Hydra node (our code) will be defined using the ",(0,o.kt)("em",{parentName:"p"},"Handle pattern"),"."),(0,o.kt)("p",null,"There might be other techniques in use because of libraries used etc."),(0,o.kt)("h2",{id:"consequences"},"Consequences"),(0,o.kt)("p",null,"For example, the network component is defined as:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-hs"},"newtype Network m = Network\n  { broadcast :: MonadThrow m => HydraMessage -> m ()\n  }\n")),(0,o.kt)("p",null,"There might be multiple ",(0,o.kt)("inlineCode",{parentName:"p"},"createNetwork :: m (Network m)")," functions"))}d.isMDXComponent=!0}}]);